Certainly, here's your SQL code with comments in the present tense:

```sql
-- Set the default schema to DFA23RAWDATA
USE DFA23RAWDATA;

/* Creating staging tables ------------------------------------------------------- */

-- Creating a staging table for sensor data
CREATE OR REPLACE TABLE HIT.Staging_SensorDataRaw (
   SENSOR_ID VARCHAR(10),
   TIMESTAMP TIMESTAMP,
   TEMPERATURE_C FLOAT,
   HUMIDITY FLOAT,
   SOIL_MOISTURE FLOAT,
   LIGHT_INTENSITY NUMBER(38,0),
   BATTERY_LEVEL FLOAT
);

-- Inserting data into the staging sensor data table from the source table
INSERT INTO HIT.Staging_SensorDataRaw
SELECT
  SENSOR_ID as SENSOR_ID,
  TO_TIMESTAMP(REPLACE(TIMESTAMP, '"', ''), 'YYYY-MM-DD HH24:MI:SS') AS Timestamp,
  TRY_CAST(TEMPERATURE as FLOAT) as TEMPERATURE_C,
  TRY_CAST(HUMIDITY as FLOAT) as HUMIDITY,
  TRY_CAST(SOIL_MOISTURE as FLOAT) as SOIL_MOISTURE,
  TRY_CAST(LIGHT_INTENSITY as NUMBER(38,0)) as LIGHT_INTENSITY,
  TRY_CAST(BATTERY_LEVEL as FLOAT) as BATTERY_LEVEL
FROM RAWDATA.SENSORDATARAW;

-- Creating a staging table for crop data
CREATE OR REPLACE TABLE HIT.Staging_CropDataRaw (
   Timestamp TIMESTAMP,
   Crop_Type VARCHAR(20),
   Crop_Yield  DECIMAL(8, 2),
   Growth_Stage VARCHAR(30),
   Pest_Issue VARCHAR(30)
);

-- Inserting data into the staging crop data table from the source table
INSERT INTO HIT.Staging_CropDataRaw
SELECT
  TO_TIMESTAMP(REPLACE(TIMESTAMP, '"', ''), 'MM/DD/YYYY HH24:MI') AS Timestamp,
  CROP_TYPE as Crop_Type,
  TRY_CAST(CROP_YIELD as DECIMAL(8, 2)) as Crop_Yield,
  GROWTH_STAGE as Growth_Stage,
  PEST_ISSUE as Pest_Issue
FROM RAWDATA.CROPDATARAW;

-- Creating a staging table for irrigation data
CREATE OR REPLACE TABLE HIT.Staging_IrrigationDataRaw (
   Sensor_ID VARCHAR(16777216),
   Timestamp TIMESTAMP,
   Irrigation_Method VARCHAR(20),
   Water_Source VARCHAR(20),
   Irrigation_Duration_Min INT
);

-- Inserting data into the staging irrigation data table from the source table
INSERT INTO HIT.Staging_IrrigationDataRaw
SELECT
  SENSOR_ID as Sensor_ID,
  TO_TIMESTAMP(REPLACE(TIMESTAMP, '"', ''), 'MM/DD/YYYY HH24:MI') AS Timestamp,
  IRRIGATION_METHOD AS Irrigation_Method,
  WATER_SOURCE as Water_Source,
  TRY_CAST(IRRIGATION_DURATION_MIN as INT) as Irrigation_Duration_Min
FROM RAWDATA.IRRIGATIONDATARAW;

-- Creating a staging table for location data
CREATE OR REPLACE TABLE HIT.Staging_LocationDataRaw (
   Sensor_ID VARCHAR(16777216),
   Location_Name VARCHAR(30),
   Latitude DECIMAL(8, 6),
   Longitude DECIMAL(9, 6),
   Elevation DECIMAL(8, 2),
   Region VARCHAR(20)
);

-- Inserting data into the staging location data table from the source table
INSERT INTO HIT.Staging_LocationDataRaw
SELECT
  SENSOR_ID as Sensor_ID,
  LOCATION_NAME AS Location_Name,
  TRY_CAST(LATITUDE AS DECIMAL(8, 6)) AS Latitude,
  TRY_CAST(LONGITUDE AS DECIMAL(9, 6)) AS Longitude,
  TRY_CAST(ELEVATION AS DECIMAL(8, 2)) AS Elevation,
  REGION as Region
FROM RAWDATA.LOCATIONDATARAW;

-- Creating a staging table for pest data
CREATE OR REPLACE TABLE HIT.Staging_PestDataRaw (
   Timestamp TIMESTAMP,
   Pest_Type VARCHAR(16777216),
   Pest_Description VARCHAR(16777216),
   Pest_Severity VARCHAR(16777216)
);

-- Inserting data into the staging pest data table from the source table
INSERT INTO HIT.Staging_PestDataRaw
SELECT
  TO_TIMESTAMP(REPLACE(TIMESTAMP, '"', ''), 'MM/DD/YYYY HH24:MI') AS Timestamp,
  PEST_TYPE AS Pest_Type,
  PEST_DESCRIPTION AS Pest_Description,
  PEST_SEVERITY AS Pest_Severity
FROM RAWDATA.PESTDATARAW;

-- Creating a staging table for weather data
CREATE OR REPLACE TABLE HIT.Staging_WeatherDataRaw (
   Timestamp TIMESTAMP,
   Weather_Condition VARCHAR(16777216),
   Wind_Speed FLOAT,
   Precipitation FLOAT
);

-- Inserting data into the staging weather data table from the source table
INSERT INTO HIT.Staging_WeatherDataRaw
SELECT
  TO_TIMESTAMP(REPLACE(TIMESTAMP, '"', ''), 'MM/DD/YYYY HH24:MI') AS Timestamp,
  WEATHER_CONDITION AS Weather_Condition,
  TRY_CAST(WIND_SPEED AS FLOAT) AS Wind_Speed,
  TRY_CAST(PRECIPITATION AS FLOAT) AS Precipitation
FROM RAWDATA.WEATHERDATARAW;

-- Creating a staging table for soil data
CREATE OR REPLACE TABLE HIT.Staging_SoilDataRaw (
   Timestamp TIMESTAMP,
   Soil_Comp FLOAT,
   Soil_Moisture FLOAT,
   Soil_Ph FLOAT,
   Nitrogen_Level FLOAT,
   Phosphorous_Level FLOAT,
   Organic_matter FLOAT
);

-- Inserting data into the staging soil data table from the source table
INSERT INTO HIT.Staging_SoilDataRaw
SELECT
  TO_TIMESTAMP(REPLACE(TIMESTAMP, '"', ''), 'MM/DD/YYYY HH24:MI') AS Timestamp,
  TRY_CAST(SOIL_COMP AS FLOAT) AS Soil_Comp,
  TRY_CAST(SOIL_MOISTURE AS FLOAT) AS Soil_Moisture,
  TRY_CAST(SOIL_PH AS FLOAT) AS Soil_Ph,
  TRY_CAST(NITROGEN_LEVEL AS FLOAT) AS Nitrogen_Level,
  TRY_CAST(PHOSPHORUS_LEVEL AS FLOAT) AS Phosphorus_Level,
  TRY_CAST(ORGANIC_MATTER AS FLOAT) AS Organic_Matter
FROM RAWDATA.SOILDATARAW;

/* Renaming tables for ease of use ------------------------------------------------ */

-- Renaming staging tables to more user-friendly names
ALTER TABLE HIT.STAGING_CROPDATARAW RENAME TO HIT.CROP_DATA_TABLE;
ALTER TABLE HIT.STAGING_IRRIGATIONDATARAW RENAME TO HIT.IRRIGATION_DATA_TABLE;
ALTER TABLE HIT.STAGING_LOCATIONDATARAW RENAME TO HIT.LOCATION_DATA_TABLE;
ALTER TABLE HIT.STAGING_PESTDATARAW RENAME TO HIT.PEST_DATA_TABLE;
ALTER TABLE HIT.STAGING_SENSORDATARAW RENAME TO HIT.SENSOR_DATA_TABLE;
ALTER TABLE HIT.STAGING_SOILDATARAW RENAME TO HIT.SOIL_DATA_TABLE;
ALTER TABLE HIT.STAGING_WEATHERDATARAW RENAME TO HIT.WEATHER_DATA_TABLE;

/* Data cleaning process ------------------------------------------------------------ */

-- Checking for null values in the column and seeing if other columns have any value in them when timestamp is null
SELECT * FROM HIT.CROP_DATA_TABLE WHERE TIMESTAMP IS NULL;

-- Removing rows where timestamp is null because the other columns are also null and they make up a small percentage of data
DELETE FROM HIT.CROP_DATA_TABLE WHERE TIMESTAMP IS NULL;


/* fixing spelling mistakes in crop type*/
UPDATE HIT.CROP_DATA_TABLE
SET CROP_TYPE = CASE
    WHEN CROP_TYPE = 'Cron' THEN 'Corn'
    ELSE CROP_TYPE
END
WHERE CROP_TYPE = 'Cron';

UPDATE HIT.CROP_DATA_TABLE
SET CROP_TYPE = CASE
    WHEN CROP_TYPE = 'Wheaat' THEN 'Wheat'
    ELSE CROP_TYPE
END
WHERE CROP_TYPE = 'Wheaat';

/* finding out how many null values crop type has*/
SELECT COUNT(CROP_TYPE) FROM HIT.CROP_DATA_TABLE WHERE CROP_YIELD IS NULL;

/* to FIND AVERAGE CROP YIELD FOR EACH CROP TYPE THEN USE THIS TO FILL IN NULLS*/
SELECT CROP_TYPE,AVG(CROP_YIELD) FROM HIT.CROP_DATA_TABLE GROUP BY CROP_TYPE;

/* Filling in missing CROP_YIELD values*/
/* replacing null values with the average for that crop_type*/
UPDATE HIT.CROP_DATA_TABLE SET CROP_YIELD = 550.30 WHERE CROP_YIELD IS NULL AND CROP_TYPE = 'Rice';
UPDATE HIT.CROP_DATA_TABLE SET CROP_YIELD = 549.28 WHERE CROP_YIELD IS NULL AND CROP_TYPE = 'Wheat';
UPDATE HIT.CROP_DATA_TABLE SET CROP_YIELD = 550.15 WHERE CROP_YIELD IS NULL AND CROP_TYPE = 'Carrot';
UPDATE HIT.CROP_DATA_TABLE SET CROP_YIELD = 549.96 WHERE CROP_YIELD IS NULL AND CROP_TYPE = 'Tomato';
UPDATE HIT.CROP_DATA_TABLE SET CROP_YIELD = 550.13 WHERE CROP_YIELD IS NULL AND CROP_TYPE = 'Potato';
UPDATE HIT.CROP_DATA_TABLE SET CROP_YIELD = 549.96 WHERE CROP_YIELD IS NULL AND CROP_TYPE = 'Cotton';
UPDATE HIT.CROP_DATA_TABLE SET CROP_YIELD = 549.07 WHERE CROP_YIELD IS NULL AND CROP_TYPE = 'Soybean';
UPDATE HIT.CROP_DATA_TABLE SET CROP_YIELD = 549.89 WHERE CROP_YIELD IS NULL AND CROP_TYPE = 'Barley';
UPDATE HIT.CROP_DATA_TABLE SET CROP_YIELD = 550.49 WHERE CROP_YIELD IS NULL AND CROP_TYPE = 'Sugarcane';
UPDATE HIT.CROP_DATA_TABLE SET CROP_YIELD = 550.19 WHERE CROP_YIELD IS NULL AND CROP_TYPE = 'Corn';


/* filling in missing irrigation duration values with the average duration */
SELECT avg(irrigation_duration_min) FROM HIT.irrigation_data_table;
UPDATE HIT.IRRIGATION_DATA_TABLE SET irrigation_duration_min = 35 WHERE irrigation_duration_min IS NULL;

/* cleaning pest data table*/

/* This query will count rows where sensor_id is NULL and at least one of the specified columns (latitude, location_name, longitude, elevation, or region) is not NULL. It allows you to identify rows where the sensor_id is missing but other location-related information is present.*/
SELECT * FROM HIT.pest_data_table WHERE pest_description is null;
/*deletes all null sensorid since we have confirmed the rows are null through out*/
delete from hit.pest_data_table where sensor_id is null;
 
/*BECAUSE IT'S CATEGORICAL DATA AND THERE IS NO WAY TO BE SURE AND WE WONT BE CONSIDERING THIS IN ANALYSIS WE REPLACE DESCRIPTION WITH NA */
UPDATE HIT.PEST_DATA_TABLE SET PEST_DESCRIPTION = 'NA' WHERE PEST_DESCRIPTION IS NULL 

/* WE CHECK HOW MANY ROWS HAVE UNKNOWN PEST SEVERITY */
SELECT COUNT(PEST_TYPE) FROM HIT.PEST_DATA_TABLE WHERE PEST_TYPE LIKE'NA'
/* SINCE IT ACCOUNTS FOR MORE THAN 5% OF THE DATA TO AVOID ISSUES DURING ANALYSIS WE LEAVE THEM AS NA */

/* Cleaning sensor data */

/* count of null temperature values*/
select count(*) from hit.sensor_data_table where temperature_c is null;
/* creates a temporary table that takes the average temperature by hour by date and hour*/
CREATE OR REPLACE TEMPORARY TABLE HIT.Temp_Avg_Temperatures AS
SELECT
  DATE_TRUNC('hour', Timestamp) AS Time_Interval,
  AVG(TEMPERATURE_C) AS Avg_Temperature
FROM HIT.sensor_data_table
WHERE TEMPERATURE_C IS NOT NULL
GROUP BY Time_Interval;
/* where the date match and it falls into the hourly range we replace with the average for that hour*/ 
UPDATE hit.sensor_data_table AS D
SET temperature_c = T.Avg_Temperature
FROM hit.Temp_Avg_Temperatures AS T
WHERE D.temperature_c IS NULL
  AND D.Timestamp BETWEEN T.Time_Interval AND T.Time_Interval + INTERVAL '1 hour';

-- Creating a temporary table to store imputed humidity values
CREATE OR REPLACE TEMPORARY TABLE HIT.Imputed_Humidity (
    Date DATE,
    Avg_Humidity DECIMAL(5, 2)
);

-- Calculating daily average humidity values
INSERT INTO HIT.Imputed_Humidity (Date, Avg_Humidity)
SELECT
    DATE_TRUNC('DAY', Timestamp) AS Date,
    AVG(Humidity) AS Avg_Humidity
FROM
    HIT.sensor_data_table 
GROUP BY
    Date;
    -- Updating your original table to fill in null humidity values
UPDATE HIT.sensor_data_table
SET Humidity = (
    SELECT AVG(Humidity)
    FROM HIT.sensor_data_table
    WHERE DATE_TRUNC('DAY', Timestamp) = DATE_TRUNC('DAY', HIT.sensor_data_table.Timestamp)
)
WHERE Humidity IS NULL;

-- Filling in missing light intensity values with hourly averages

-- creating a temporary table to house hourly average of light intensity
CREATE or replace TEMPORARY TABLE HIT.TempLightIntensityAverage AS
SELECT
    DATE_TRUNC('HOUR', Timestamp) AS Hour,
    AVG(light_intensity) AS HourlyAverageLightIntensity
FROM HIT.SENSOR_DATA_TABLE
GROUP BY DATE_TRUNC('HOUR', Timestamp);

-- Updating the original table to fill in null light_intensity values with hourly averages
UPDATE HIT.SENSOR_DATA_TABLE t1
SET t1.light_intensity = t2.HourlyAverageLightIntensity
FROM HIT.TempLightIntensityAverage t2
WHERE DATE_TRUNC('HOUR', t2.Hour) = DATE_TRUNC('HOUR', t1.Timestamp)
    AND t1.light_intensity IS NULL;

--Updating missing soil moisture values with hourly averages
-- creating a temporary table containing hourly averages for soil moisture
CREATE or replace TEMPORARY TABLE HIT.TempSoilMoistureAverage AS
SELECT
    DATE_TRUNC('HOUR', Timestamp) AS Hour,
    AVG(soil_moisture) AS HourlyAverageSoilMoisture
FROM HIT.sensor_data_table
GROUP BY DATE_TRUNC('HOUR', Timestamp);

-- Updating the original table to fill in null soil_moisture values with hourly averages
UPDATE HIT.sensor_data_table t1
SET t1.soil_moisture = t2.HourlyAverageSoilMoisture
FROM HIT.TempSoilMoistureAverage t2
WHERE DATE_TRUNC('HOUR', t2.Hour) = DATE_TRUNC('HOUR', t1.Timestamp)
    AND t1.soil_moisture IS NULL;

-- Drop the temporary table when no longer needed
DROP TABLE hit.TempSoilMoistureAverage;

---Cleaning soil data table
-- because everywhere timestamp is null the rest of the columns are null we drop those rows
DELETE FROM hit.soil_data_table WHERE timestamp IS NULL;

-- AFTER CHECKING THAT THE DATA IS NORMAL (NOT SKEWED) I REPLACED WITH THE MEAN, I CONFIRMED USING PYTHON ()
----- SCRIPT THAT UPDATES NULL VALUES FOR SOIL_COMP WITH THE AVG
UPDATE HIT.SOIL_DATA_TABLE
SET SOIL_COMP = (
    SELECT AVG(SOIL_COMP)
    FROM HIT.SOIL_DATA_TABLE
    WHERE SOIL_COMP IS NOT NULL
)
WHERE SOIL_COMP IS NULL;
----- SCRIPT THAT UPDATES NULL VALUES FOR SOIL_MOISTURE WITH THE AVG
UPDATE HIT.SOIL_DATA_TABLE
SET SOIL_MOISTURE = (
    SELECT AVG(SOIL_MOISTURE)
    FROM HIT.SOIL_DATA_TABLE
    WHERE SOIL_MOISTURE IS NOT NULL
)
WHERE SOIL_MOISTURE IS NULL;
----- SCRIPT THAT UPDATES NULL VALUES FOR SOIL_PH WITH THE AVG
UPDATE HIT.SOIL_DATA_TABLE
SET SOIL_PH = (
    SELECT AVG(SOIL_PH)
    FROM HIT.SOIL_DATA_TABLE
    WHERE SOIL_PH IS NOT NULL
)
WHERE SOIL_PH IS NULL;
----- SCRIPT THAT UPDATES NULL VALUES FOR NITROGEN_LEVEL WITH THE AVG
UPDATE HIT.SOIL_DATA_TABLE
SET NITROGEN_LEVEL = (
    SELECT AVG(NITROGEN_LEVEL)
    FROM HIT.SOIL_DATA_TABLE
    WHERE NITROGEN_LEVEL IS NOT NULL
)
WHERE NITROGEN_LEVEL IS NULL;
----- SCRIPT THAT UPDATES NULL VALUES FOR PHOSPHOROUS_LEVEL WITH THE AVG
UPDATE HIT.SOIL_DATA_TABLE
SET PHOSPHOROUS_LEVEL = (
    SELECT AVG(PHOSPHOROUS_LEVEL)
    FROM HIT.SOIL_DATA_TABLE
    WHERE PHOSPHOROUS_LEVEL IS NOT NULL
)
WHERE PHOSPHOROUS_LEVEL IS NULL;
----- SCRIPT THAT UPDATES NULL VALUES FOR ORGANIC_MATTER WITH THE AVG
UPDATE HIT.SOIL_DATA_TABLE
SET ORGANIC_MATTER = (
    SELECT AVG(ORGANIC_MATTER)
    FROM HIT.SOIL_DATA_TABLE
    WHERE ORGANIC_MATTER IS NOT NULL
)
WHERE ORGANIC_MATTER IS NULL;
----------------------------------------------------------------------------------

/* CLEANING PEST DATA TABLE -----------------------------------------------------------------------*/

/* FIXING MISSPELLINGS IN PEST TYPE COLUMN */

UPDATE HIT.PEST_DATA_TABLE
SET PEST_TYPE = CASE
    WHEN PEST_TYPE = 'Slogs' THEN 'Slugs'
    ELSE PEST_TYPE 
END
WHERE PEST_TYPE = 'Slogs';

UPDATE HIT.PEST_DATA_TABLE
SET PEST_TYPE = CASE
    WHEN PEST_TYPE = 'Aphiods' THEN 'Aphids'
    ELSE PEST_TYPE 
END
WHERE PEST_TYPE = 'Aphiods';

/* fixing mispellings in pest_severity_column*/

UPDATE HIT.PEST_DATA_TABLE
SET PEST_SEVERITY = CASE
    WHEN PEST_SEVERITY = 'Hihg' THEN 'High'
    ELSE PEST_SEVERITY 
END
WHERE PEST_SEVERITY = 'Hihg';

/* fixing issues with description spellings*/
UPDATE HIT.PEST_DATA_TABLE
SET PEST_DESCRIPTION = CASE
    WHEN PEST_DESCRIPTION = 'Aphids : high infestation riskkk.' THEN 'Aphids : high infestation risk.'
    ELSE PEST_DESCRIPTION
END
WHERE PEST_DESCRIPTION = 'Aphids : high infestation riskkk.';

UPDATE HIT.PEST_DATA_TABLE
SET PEST_DESCRIPTION = CASE
    WHEN PEST_DESCRIPTION = 'Aphids : infestation deteced.' THEN 'Aphids : infestation detected.'
    ELSE PEST_DESCRIPTION
END
WHERE PEST_DESCRIPTION = 'Aphids : infestation deteced.';

UPDATE HIT.PEST_DATA_TABLE
SET PEST_DESCRIPTION = CASE
    WHEN PEST_DESCRIPTION = 'Caterpillars : infestation deteced.' THEN 'Caterpillars : infestation detected.'
    ELSE PEST_DESCRIPTION
END
WHERE PEST_DESCRIPTION = 'Caterpillars : infestation deteced.';

UPDATE HIT.PEST_DATA_TABLE
SET PEST_DESCRIPTION = CASE
    WHEN PEST_DESCRIPTION = 'Caterpillars : high infestation riskkk.' THEN 'Caterpillars : high infestation risk.'
    ELSE PEST_DESCRIPTION
END
WHERE PEST_DESCRIPTION = 'Caterpillars : high infestation riskkk.';

UPDATE HIT.PEST_DATA_TABLE
SET PEST_DESCRIPTION = CASE
    WHEN PEST_DESCRIPTION = 'Fungus : high infestation riskkk.' THEN 'Fungus : high infestation risk.'
    ELSE PEST_DESCRIPTION
END
WHERE PEST_DESCRIPTION = 'Fungus : high infestation riskkk.';

UPDATE HIT.PEST_DATA_TABLE
SET PEST_DESCRIPTION = CASE
    WHEN PEST_DESCRIPTION = 'Fungus : infestation deteced.' THEN 'Fungus : infestation detected.'
    ELSE PEST_DESCRIPTION
END
WHERE PEST_DESCRIPTION = 'Fungus : infestation deteced.';

UPDATE HIT.PEST_DATA_TABLE
SET PEST_DESCRIPTION = CASE
    WHEN PEST_DESCRIPTION = 'Mites : high infestation riskkk.' THEN 'Mites : high infestation risk.'
    ELSE PEST_DESCRIPTION
END
WHERE PEST_DESCRIPTION = 'Mites : high infestation riskkk.';

UPDATE HIT.PEST_DATA_TABLE
SET PEST_DESCRIPTION = CASE
    WHEN PEST_DESCRIPTION = 'Mites : infestation deteced.' THEN 'Mites : infestation detected.'
    ELSE PEST_DESCRIPTION
END
WHERE PEST_DESCRIPTION = 'Mites : infestation deteced.';


UPDATE HIT.PEST_DATA_TABLE
SET PEST_DESCRIPTION = CASE
    WHEN PEST_DESCRIPTION = 'Other : high infestation riskkk.' THEN 'Other : high infestation risk.'
    ELSE PEST_DESCRIPTION
END
WHERE PEST_DESCRIPTION = 'Other : high infestation riskkk.';

UPDATE HIT.PEST_DATA_TABLE
SET PEST_DESCRIPTION = CASE
    WHEN PEST_DESCRIPTION = 'Other : infestation deteced.' THEN 'Other : infestation detected.'
    ELSE PEST_DESCRIPTION
END
WHERE PEST_DESCRIPTION = 'Other : infestation deteced.';

UPDATE HIT.PEST_DATA_TABLE
SET PEST_DESCRIPTION = CASE
    WHEN PEST_DESCRIPTION = 'Slogs : high infestation riskkk.' THEN 'Slugs : high infestation risk.'
    ELSE PEST_DESCRIPTION
END
WHERE PEST_DESCRIPTION = 'Slogs : high infestation riskkk.';

UPDATE HIT.PEST_DATA_TABLE
SET PEST_DESCRIPTION = CASE
    WHEN PEST_DESCRIPTION = 'Slogs : infestation deteced.' THEN 'Slugs : infestation detected.'
    ELSE PEST_DESCRIPTION
END
WHERE PEST_DESCRIPTION = 'Slogs : infestation deteced.';

UPDATE HIT.PEST_DATA_TABLE
SET PEST_DESCRIPTION = CASE
    WHEN PEST_DESCRIPTION = 'Slugs : high infestation riskkk.' THEN 'Slugs : high infestation risk.'
    ELSE PEST_DESCRIPTION
END
WHERE PEST_DESCRIPTION = 'Slugs : high infestation riskkk.';

UPDATE HIT.PEST_DATA_TABLE
SET PEST_DESCRIPTION = CASE
    WHEN PEST_DESCRIPTION = 'Slugs : infestation deteced.' THEN 'Slugs : infestation detected.'
    ELSE PEST_DESCRIPTION
END
WHERE PEST_DESCRIPTION = 'Slugs : infestation deteced.';

UPDATE HIT.PEST_DATA_TABLE
SET PEST_DESCRIPTION = CASE
    WHEN PEST_DESCRIPTION = 'Whiteflies : high infestation riskkk.' THEN 'Whiteflies : high infestation risk.'
    ELSE PEST_DESCRIPTION
END
WHERE PEST_DESCRIPTION = 'Whiteflies : high infestation riskkk.';

UPDATE HIT.PEST_DATA_TABLE
SET PEST_DESCRIPTION = CASE
    WHEN PEST_DESCRIPTION = 'Whiteflies : infestation deteced.' THEN 'Whiteflies : infestation detected.'
    ELSE PEST_DESCRIPTION
END
WHERE PEST_DESCRIPTION = 'Whiteflies : infestation deteced.';
------------------------------------------------------------------------------------------------------------------------------------------------

/* CLEANING WEATHER DATA TABLE---------------------------*/

/* fixing misspellings in weather condition column*/

UPDATE HIT.WEATHER_DATA_TABLE
SET WEATHER_CONDITION = CASE
    WHEN WEATHER_CONDITION = 'Claar' THEN 'Clear'
    ELSE WEATHER_CONDITION 
END
WHERE WEATHER_CONDITION = 'Claar';

UPDATE HIT.WEATHER_DATA_TABLE
SET WEATHER_CONDITION = CASE
    WHEN WEATHER_CONDITION = 'Party Cloudy' THEN 'Partly Cloudy'
    ELSE WEATHER_CONDITION 
END
WHERE WEATHER_CONDITION = 'Party Cloudy';

/* SELECT * FROM HIT.WEATHER_DATA_TABLE WHERE TIMESTAMP IS NULL AND (WEATHER_CONDITION OR WIND_SPEED or PRECIPITATION IS NOT NULL);*/

/* THE ABOVE QUERY CHECKS TO SEE IF WHEN TIMESTAMP COLUMN IS NULL ANY OTHER IS NOT NULL, SINCE ALL COLUMNS ARE NULL IF TIMESTAMP IS NULL WE DROP THE ROWS*/
DELETE FROM HIT.WEATHER_DATA_TABLE WHERE TIMESTAMP IS NULL;

/* TO CHECK FOR MISSING VALUES IN OTHER COLUMNS */
SELECT * FROM HIT.WEATHER_DATA_TABLE WHERE WEATHER_CONDITION IS NULL;
SELECT * FROM HIT.WEATHER_DATA_TABLE WHERE WIND_SPEED IS NULL;
SELECT * FROM HIT.WEATHER_DATA_TABLE WHERE PRECIPITATION IS NULL;
-- BECAUSE WEATHER CONDITION IS CATEGORICAL WE FILL NULL VALUES WITH NA
UPDATE HIT.WEATHER_DATA_TABLE SET WEATHER_CONDITION = 'NA' WHERE WEATHER_DATA_TABLE IS NULL;

/* we first confirm the data is normal (The script for this can be found in the jupyter notebook = 'de_datafest_datathon') */ 

-- after confirming this we proceed to replace with the mean for both wind speed and precipitation columns
-- for the wind speed column
UPDATE HIT.WEATHER_DATA_TABLE
SET WIND_SPEED = (
    SELECT AVG(WIND_SPEED)
    FROM HIT.WEATHER_DATA_TABLE
    WHERE WIND_SPEED IS NOT NULL
)
WHERE WIND_SPEED IS NULL;

-- for the precipitation column

UPDATE HIT.WEATHER_DATA_TABLE
SET PRECIPITATION = (
    SELECT AVG(PRECIPITATION)
    FROM HIT.WEATHER_DATA_TABLE
    WHERE PRECIPITATION IS NOT NULL
)
WHERE PRECIPITATION IS NULL;

---------------- FINALLY DONE WITH CLEANING ----------------------------------------------

--- Creating dimension tables & asigning primary keys & foreign keys & indexing/clustering ------------------------------------------------------------------ 

-- Create the Location Dimension Table------------------------ 

CREATE OR REPLACE TABLE DFA23RAWDATA.HIT.LOCATION_DIMENSION_TABLE (
	LOCATION_NAME VARCHAR(30) NOT NULL,
	SENSOR_ID VARCHAR(16777216),
	LATITUDE NUMBER(8,6),
	LONGITUDE NUMBER(9,6),
	ELEVATION NUMBER(8,2),
	REGION VARCHAR(20),
	PRIMARY KEY (LOCATION_NAME)
);
/* INSERTS DATA INTO THE DIMENSION TABLE*/
INSERT INTO HIT.LOCATION_DIMENSION_TABLE (Location_Name, Latitude, Longitude, Elevation, Region)
SELECT Location_Name, Latitude, Longitude, Elevation, Region FROM HIT.LOCATION_DATA_TABLE;

-- Create the Crop Dimension Table ---------------------------------
CREATE TABLE HIT.CROP_DIMENSION_TABLE(
    CROP_TYPE VARCHAR(50) PRIMARY KEY,
    PEST_ISSUE VARCHAR(30),
    CROP_YIELD NUMBER,
    TIMESTAMP TIMESTAMP,
    GROWTH_STAGE VARCHAR(50)
);
-- loading the data ----------------------
INSERT INTO HIT.CROP_DIMENSION_TABLE (Crop_ID, CROP_TYPE, GROWTH_STAGE)
SELECT HASH(CROP_TYPE), CROP_TYPE, GROWTH_STAGE FROM HIT.CROP_DATA_TABLE;

-- Create the Pest Dimension Table-----------
CREATE TABLE HIT.PEST_DIMENSION_TABLE (
    Pest_ID INT PRIMARY KEY,
    Pest_Type VARCHAR(50) UNIQUE,
    Pest_Description VARCHAR(255)
);

-- Load data into the Pest Dimension Table MAKING UNIQUE PEST ID
INSERT INTO HIT.PEST_DIMENSION_TABLE (Pest_ID, Pest_Type, Pest_Description)
SELECT HASH(Pest_Type), Pest_Type, Pest_Description FROM HIT.PEST_DATA_TABLE;

-- Create the Sensor Dimension Table-----------
CREATE OR REPLACE TABLE DFA23RAWDATA.HIT.SENSOR_DIMENSION_TABLE (
	SENSOR_ID VARCHAR(10) PRIMARY KEY,
	TIMESTAMP TIMESTAMP_NTZ(9),
	TEMPERATURE_C FLOAT,
	HUMIDITY FLOAT,
	SOIL_MOISTURE FLOAT,
	LIGHT_INTENSITY NUMBER(38,0),
	BATTERY_LEVEL FLOAT
);

-- Load data into the Sensor Dimension Table --------------- 
INSERT INTO HIT.SENSOR_DIMENSION_TABLE (SENSOR_ID,TIMESTAMP,TEMPERATURE,HUMIDITY,SOIL_MOISTURE,LIGHT_INTENSITY,BATTERY_LEVEL)
SELECT * FROM HIT.SENSOR_DATA_TABLE;

----------- Creating irrigation dimension table --------
create or replace TABLE DFA23RAWDATA.HIT.IRRIGATION_DIMENSION_TABLE cluster by (Sensor_ID)(    /* because snowflake doesnt support indexing we cluster on our index clumn*/
	TIMESTAMP TIMESTAMP_NTZ(9) NOT NULL,
	SENSOR_ID VARCHAR(16777216) NOT NULL,
	IRRIGATION_METHOD VARCHAR(20),
	WATER_SOURCE VARCHAR(20),
	IRRIGATION_DURATION_MIN NUMBER(38,0),
	primary key (TIMESTAMP, SENSOR_ID),
	foreign key (TIMESTAMP) references DFA23RAWDATA.HIT.TIME_DIMENSION_TABLE(TIMESTAMP)
);

---------- loading the data ---------------------
INSERT INTO HIT.IRRIGATION_DIMENSION_TABLE ( TIMESTAMP,SENSOR_ID,IRIGATION_METHOD,IRRIGATION_DURATION_MIN)
SELECT * FROM HIT.IRRIGATION_DATA_TABLE;

----- creating soil dimension table -------------------------------------------------------------------

create or replace TABLE DFA23RAWDATA.HIT.SOIL_DIMENSION_TABLE (
	TIMESTAMP TIMESTAMP_NTZ(9) NOT NULL,
	SOIL_COMP FLOAT,
	SOIL_MOISTURE FLOAT,
	SOIL_PH FLOAT,
	NITROGEN_LEVEL FLOAT,
	PHOSPHOROUS_LEVEL FLOAT,
	ORGANIC_MATTER FLOAT,
	primary key (TIMESTAMP),
	foreign key (TIMESTAMP) references DFA23RAWDATA.HIT.TIME_DIMENSION_TABLE(TIMESTAMP)
);

---------------------------------------- loading data ------------------------------------------------

INSERT INTO HIT.SOIL_DIMENSION_TABLE ( TIMESTAMP,SOIL_COMP,SOIL_MOISTURE,SOIL_PH,NITROGEN_LEVEL,PHOSPHORUS_LEVEL,ORGANIC_MATTER)
SELECT * FROM HIT.SOIL_DATA_TABLE;


---------- creating the time dimension table ---------------------------------------------
create or replace TABLE DFA23RAWDATA.HIT.TIME_DIMENSION_TABLE cluster by (Month,Year)(
	TIMESTAMP TIMESTAMP_NTZ(9) NOT NULL,
	YEAR NUMBER(38,0),
	MONTH NUMBER(38,0),
	WEEKDAY VARCHAR(10),
	primary key (TIMESTAMP)
);

-------------------------------------------------------------------- loading data ------------------------------------
INSERT INTO HIT.TIME_DIMENSION_TABLE (TIMESTAMP,YEAR,MONTH,WEEKDAY)
SELECT
    DISTINCT timestamp,
    EXTRACT(YEAR FROM timestamp) AS Year,
    EXTRACT(MONTH FROM timestamp) AS Month,
    TO_CHAR(timestamp, 'Dy') AS Weekday
FROM HIT.SENSOR_DATA_TABLE;

------------------------------ creating weather dimension table -------------------------------------
create or replace TABLE DFA23RAWDATA.HIT.WEATHER_DIMENSION_TABLE cluster by (Timestamp)(
	TIMESTAMP TIMESTAMP_NTZ(9) NOT NULL,
	WEATHER_CONDITION VARCHAR(16777216),
	WIND_SPEED FLOAT,
	PRECIPITATION FLOAT,
	primary key (TIMESTAMP),
	foreign key (TIMESTAMP) references DFA23RAWDATA.HIT.TIME_DIMENSION_TABLE(TIMESTAMP)
);


-------------------- loading data --------------------------------------------------------------------
INSERT INTO HIT.WEATHER_DIMENSION_TABLE ( TIMESTAMP,WEATHER_CODITION,WIND_SPEED,PRECIPITATION)
SELECT * FROM HIT.WEATHER_DATA_TABLE;

-----creating fact tables ---------
CREATE OR REPLACE TABLE HIT.SENSOR_FACT_TABLE AS
SELECT  SENSOR_ID,TIMESTAMP
FROM HIT.SENSOR_DIMENSION_TABLE;

CREATE OR REPLACE TABLE HIT.CROP_FACT_TABLE AS
SELECT  crop_type
FROM HIT.SENSOR_DIMENSION_TABLE;




/*
---------------------------------------THE FOLLOWING QUERIES SHOULD ONLY BE CONSIDERED WHEN NEW DATA HAS BEEN ADDED TO THE RAW DATA ----------------------------------
-- Set the default schema to DFA23RAWDATA
USE DFA23RAWDATA;

-------------------- Create or replace staging tables (you can put this section in a separate script if you want to keep the original tables intact) -------

-- Create or replace the staging table for sensor data
CREATE OR REPLACE TABLE HIT.SENSOR_DATA_TABLE (
   SENSOR_ID VARCHAR(10),
   TIMESTAMP TIMESTAMP,
   TEMPERATURE_C FLOAT,
   HUMIDITY FLOAT,
   SOIL_MOISTURE FLOAT,
   LIGHT_INTENSITY NUMBER(38,0),
   BATTERY_LEVEL FLOAT
);

-- Create or replace the staging table for crop data ---------------------
CREATE OR REPLACE TABLE HIT.CROP_DATA_TABLE (
   Timestamp TIMESTAMP,
   Crop_Type VARCHAR(20),
   Crop_Yield  DECIMAL(8, 2),
   Growth_Stage VARCHAR(30),
   Pest_Issue VARCHAR(30)
);

-- Create or replace the staging table for irrigation data -----------------------------
CREATE OR REPLACE TABLE HIT.IRRIGATION_DATA_TABLE (
   Sensor_ID VARCHAR(16777216),
   Timestamp TIMESTAMP,
   Irrigation_Method VARCHAR(20),
   Water_Source VARCHAR(20),
   Irrigation_Duration_Min INT
);

-- Create or replace the staging table for location data --------------------------------------
CREATE OR REPLACE TABLE HIT.LOCATION_DATA_TABLE (
   Sensor_ID VARCHAR(16777216),
   Location_Name VARCHAR(30),
   Latitude DECIMAL(8, 6),
   Longitude DECIMAL(9, 6),
   Elevation DECIMAL(8, 2),
   Region VARCHAR(20)
);

-- Create or replace the staging table for pest data -------------------------------------------
CREATE OR REPLACE TABLE HIT.PEST_DATA_TABLE (
   Timestamp TIMESTAMP,
   Pest_Type VARCHAR(16777216),
   Pest_Description VARCHAR(16777216),
   Pest_Severity VARCHAR(16777216)
);

-- Create or replace the staging table for weather data ---------------------------------------------------
CREATE OR REPLACE TABLE HIT.WEATHER_DATA_TABLE (
   Timestamp TIMESTAMP,
   Weather_Condition VARCHAR(16777216),
   Wind_Speed FLOAT,
   Precipitation FLOAT
);

-- Create or replace the staging table for soil data ------------------------------------------------------------------
CREATE OR REPLACE TABLE HIT.SOIL_DATA_TABLE (
   Timestamp TIMESTAMP,
   Soil_Comp FLOAT,
   Soil_Moisture FLOAT,
   Soil_Ph FLOAT,
   Nitrogen_Level FLOAT,
   Phosphorous_Level FLOAT,
   Organic_Matter FLOAT
);

------------------------------- Insert new data into staging tables (you can repeat this section for each data source) -----------------------------

----- Insert new data into the staging sensor data table from the source table (adjust as needed) -------------------------------------
INSERT INTO HIT.SENSOR_DATA_TABLE
SELECT
  SENSOR_ID as SENSOR_ID,
  TO_TIMESTAMP(REPLACE(TIMESTAMP, '"', ''), 'YYYY-MM-DD HH24:MI:SS') AS Timestamp,
  TRY_CAST(TEMPERATURE as FLOAT) as TEMPERATURE_C,
  TRY_CAST(HUMIDITY as FLOAT) as HUMIDITY,
  TRY_CAST(SOIL_MOISTURE as FLOAT) as SOIL_MOISTURE,
  TRY_CAST(LIGHT_INTENSITY as NUMBER(38,0)) as LIGHT_INTENSITY,
  TRY_CAST(BATTERY_LEVEL as FLOAT) as BATTERY_LEVEL
FROM NEW_RAWDATA.SENSORDATARAW;

------------------- Insert new data into the staging crop data table from the source table (adjust as needed) ---------------------------------------
INSERT INTO HIT.CROP_DATA_TABLE
SELECT
  TO_TIMESTAMP(REPLACE(TIMESTAMP, '"', ''), 'MM/DD/YYYY HH24:MI') AS Timestamp,
  CROP_TYPE as Crop_Type,
  TRY_CAST(CROP_YIELD as DECIMAL(8, 2)) as Crop_Yield,
  GROWTH_STAGE as Growth_Stage,
  PEST_ISSUE as Pest_Issue
FROM NEW_RAWDATA.CROPDATARAW;

-------------------- Insert new data into the staging irrigation data table from the source table (adjust as needed) ------------------------------
INSERT INTO HIT.IRRIGATION_DATA_TABLE
SELECT
  SENSOR_ID as Sensor_ID,
  TO_TIMESTAMP(REPLACE(TIMESTAMP, '"', ''), 'MM/DD/YYYY HH24:MI') AS Timestamp,
  IRRIGATION_METHOD AS Irrigation_Method,
  WATER_SOURCE as Water_Source,
  TRY_CAST(IRRIGATION_DURATION_MIN as INT) as Irrigation_Duration_Min
FROM NEW_RAWDATA.IRRIGATIONDATARAW;

-------------------- Insert new data into the staging location data table from the source table (adjust as needed) ---------------------------------
INSERT INTO HIT.LOCATION_DATA_TABLE
SELECT
  SENSOR_ID as Sensor_ID,
  LOCATION_NAME AS Location_Name,
  TRY_CAST(LATITUDE AS DECIMAL(8, 6)) AS Latitude,
  TRY_CAST(LONGITUDE AS DECIMAL(9, 6)) AS Longitude,
  TRY_CAST(ELEVATION AS DECIMAL(8, 2)) AS Elevation,
  REGION as Region
FROM NEW_RAWDATA.LOCATIONDATARAW;

------------ Insert new data into the staging pest data table from the source table (adjust as needed) ---------------------------
INSERT INTO HIT.PEST_DATA_TABLE
SELECT
  TO_TIMESTAMP(REPLACE(TIMESTAMP, '"', ''), 'MM/DD/YYYY HH24:MI') AS Timestamp,
  PEST_TYPE AS Pest_Type,
  PEST_DESCRIPTION AS Pest_Description,
  PEST_SEVERITY AS Pest_Severity
FROM NEW_RAWDATA.PESTDATARAW;

--------------- Insert new data into the staging weather data table from the source table (adjust as needed) --------------------------
INSERT INTO HIT.WEATHER_DATA_TABLE
SELECT
  TO_TIMESTAMP(REPLACE(TIMESTAMP, '"', ''), 'MM/DD/YYYY HH24:MI') AS Timestamp,
  WEATHER_CONDITION AS Weather_Condition,
  TRY_CAST(WIND_SPEED AS FLOAT) AS



---- THEN RE-RUN THE REST OF THE CODE--------------------------
*/










